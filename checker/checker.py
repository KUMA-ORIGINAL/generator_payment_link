from http.client import responses

import httpx
import time
import uuid
import os
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
PAYMENT_API_URL = os.getenv("PAYMENT_API_URL")  # URL –¥–æ –≤–∞—à–µ–≥–æ backend API
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TELEGRAM_TOPIC_ID = os.getenv("TELEGRAM_TOPIC_ID")
PAYMENT_API_TOKEN = os.getenv("PAYMENT_API_TOKEN")
REDIRECT_URL = os.getenv("REDIRECT_URL", "https://example.com/success")

api_is_broken = False

def send_telegram_message(message, retries=3, delay=3):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    for attempt in range(retries):
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            payload = {
                "chat_id": TELEGRAM_CHAT_ID,
                "text": f"‚ö†Ô∏è {message}"
            }
            if TELEGRAM_TOPIC_ID:
                payload["message_thread_id"] = TELEGRAM_TOPIC_ID

            response = httpx.post(url, data=payload, timeout=30)
            response.raise_for_status()
            logging.info("üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            time.sleep(delay)
    return False


def handle_api_error(msg):
    global api_is_broken
    if not api_is_broken:
        send_telegram_message(msg)
        api_is_broken = True
    logging.error(msg)


def check_api():
    global api_is_broken
    transaction_id = str(uuid.uuid4())
    payload = {
        "amount": "100.00",
        "transaction_id": transaction_id,
        "comment": "üöÄ Health Check",
        "redirect_url": REDIRECT_URL,
        "token": PAYMENT_API_TOKEN
    }
    try:
        response = httpx.post(PAYMENT_API_URL, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        pay_url = data.get("pay_url")
        if not pay_url:
            msg = f"[üí≥ –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏] ‚ùó API –æ—Ç–≤–µ—Ç –±–µ–∑ 'pay_url'. –ö–æ–¥: {response.status_code}, –æ—Ç–≤–µ—Ç: {data}"
            handle_api_error(msg)
        else:
            if api_is_broken:
                send_telegram_message("[üí≥ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞] ‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–æ–µ API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                api_is_broken = False
            logging.info(f"[üí≥ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞] ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Å—ã–ª–∫–∞: {pay_url}")
    except httpx.HTTPStatusError as e:
        msg = f"[üí≥ –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏] ‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {e.response.status_code}: {e.response.text}"
        handle_api_error(msg)
    except (httpx.TimeoutException, httpx.RequestError) as e:
        msg = f"[üí≥ –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}"
        handle_api_error(msg)
    except Exception as e:
        msg = f"[üí≥ –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏] ‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {str(e)}"
        handle_api_error(msg)


if __name__ == "__main__":
    logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend...")
    time.sleep(10)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    logging.info("üîÅ –ó–∞–ø—É—Å–∫ health-check –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç...")
    while True:
        check_api()
        time.sleep(300)
