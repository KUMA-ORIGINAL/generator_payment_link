import httpx
import time
import uuid
import os
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
PAYMENT_API_URL = os.getenv("PAYMENT_API_URL")  # URL –¥–æ –≤–∞—à–µ–≥–æ backend API
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
PAYMENT_API_TOKEN = os.getenv("PAYMENT_API_TOKEN")
REDIRECT_URL = os.getenv("REDIRECT_URL", "https://example.com/success")


def send_telegram_message(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": f"‚ö†Ô∏è {message}"
        }
        httpx.post(url, data=payload)
        logging.info("üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")


def check_api():
    transaction_id = str(uuid.uuid4())
    payload = {
        "amount": "100.00",
        "transaction_id": transaction_id,
        "comment": "üöÄ Health Check",
        "redirect_url": REDIRECT_URL,
        "token": PAYMENT_API_TOKEN
    }

    try:
        response = httpx.post(PAYMENT_API_URL, json=payload)
        data = response.json()

        if response.status_code != 200 or "pay_url" not in data:
            msg = f"‚ùó –û—à–∏–±–∫–∞ API: {response.status_code}, –æ—Ç–≤–µ—Ç: {data}"
            send_telegram_message(msg)
            logging.warning(msg)
        else:
            logging.info(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Å—ã–ª–∫–∞: {data['pay_url']}")
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"
        send_telegram_message(msg)
        logging.error(msg)


if __name__ == "__main__":
    logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend...")
    time.sleep(10)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    logging.info("üîÅ –ó–∞–ø—É—Å–∫ health-check –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç...")
    while True:
        check_api()
        time.sleep(300)
